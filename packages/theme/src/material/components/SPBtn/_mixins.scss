@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';
@use '../material/settings' as settings;
@use '../material/tools' as tools;
@use './_variables' as *;

@mixin button-sizes($map: $button-sizes, $immediate: false) {
  @each $sizeName, $multiplier in settings.$size-scales {
    $size: map.get($map, 'font-size') + math.div(2 * $multiplier, 16);
    $height: map.get($map, 'height') + (settings.$size-scale * $multiplier);

    #{if($immediate, &, '')}.sp-btn--size-#{$sizeName} {
      --sp-btn-size: #{$size};
      --sp-btn-height: #{$height};
      font-size: var(--sp-btn-size);
      min-width: tools.roundEven($height * map.get($map, 'width-ratio'));
      padding: 0
        tools.roundEven(math.div($height, map.get($map, 'padding-ratio')));
    }
  }
}

@mixin button-density($properties, $densities) {
  @each $density, $multiplier in $densities {
    $value: calc(var(--sp-btn-height) + #{$multiplier * settings.$spacer});

    &.sp-btn--density-#{$density} {
      @if meta.type-of($properties) == 'list' {
        @each $property in $properties {
          #{$property}: $value;
        }
      } @else {
        #{$properties}: $value;
      }
    }
  }
}
